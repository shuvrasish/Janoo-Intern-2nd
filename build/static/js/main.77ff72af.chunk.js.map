{"version":3,"sources":["firebase.js","Notification.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["database","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Notification","className","onClick","toast","success","custom","error","src","alt","style","maxWidth","border","background","width","App","React","useEffect","msg","messaging","isSupported","requestPermission","then","console","log","getToken","vapidKey","data","warn","auth","currentUser","collection","doc","update","token","FieldValue","arrayUnion","email","arrayRemove","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"4OAsBeA,G,YAJKC,IAASC,cAVN,CACrBC,OAAQ,0CACRC,WAAY,6BACZC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIYC,a,+BC8BdC,EA5CM,WA6BjB,OACI,sBAAKC,UAAU,YAAf,UACI,wBAAQA,UAAU,UAAUC,QA9BpB,kBAAMC,IAAMC,QAAQ,0CA8B5B,mBACA,wBAAQH,UAAU,UAAUC,QA9BpB,kBAAMC,YAAM,wEA8BpB,mBACA,wBAAQF,UAAU,UAAUC,QA9BpB,kBAAMC,IAAME,OACxB,2CACW,6CADX,uBACmD,wDA4B/C,mBACA,wBAAQJ,UAAU,UAAUC,QA3BpB,kBAAMC,IAAMG,MAAM,wCA2B1B,mBACA,wBAAQL,UAAU,UAAUC,QA3BpB,kBAAMC,IAAME,OACxB,qBAAKE,IAAI,wFAAwFC,IAAI,iBAAkB,CACnHC,MAAO,CACHC,SAAU,YAwBd,mBACA,wBAAQT,UAAU,UAAUC,QArBpB,kBAAMC,YAAM,gCAqBpB,mBACA,wBAAQF,UAAU,UAAUC,QArBpB,kBAAMC,YAAM,yBAA2B,CACnDM,MAAO,CACHE,OAAQ,kBACRC,WAAY,gBAkBZ,mBACA,wBAAQX,UAAU,UAAUC,QAhBpB,kBAAMC,YAAM,2BAA4B,CACpDM,MAAO,CACHE,OAAQ,gBACRE,MAAO,YAaP,mBACA,cAAC,IAAD,QCqCGC,MAnEf,WA4CE,OA1CAC,IAAMC,WAAU,WACd,IAAIC,EAAM,KACN3B,IAAS4B,UAAUC,gBACrBF,EAAM3B,IAAS4B,aACXE,oBAAoBC,MAAK,WAE3B,OADAC,QAAQC,MACDN,EAAIO,SAAS,CAAEC,SAAU,+FAC/BJ,MAAK,SAACK,GACPJ,QAAQK,KAAK,QAASD,GAEa,MAA/BpC,IAASsC,OAAOC,YAClBxC,EAASyC,WAAW,qBAAqBC,IAAI,qBAAqBC,OAChE,CACEC,MAAO3C,IAASS,UAAUmC,WAAWC,WAAWT,MAKpDJ,QAAQC,IAAIjC,IAASsC,OAAOC,YAAYO,OACxC/C,EAASyC,WAAW,SAASC,IAAIzC,IAASsC,OAAOC,YAAYO,OAAOJ,OAClE,CACEC,MAAOP,IAIXrC,EAASyC,WAAW,qBAAqBC,IAAI,qBAAqBC,OAChE,CACEC,MAAO3C,IAASS,UAAUmC,WAAWG,YAAYX,YAgB3D,qBAAKzB,UAAU,MAAf,SACE,cAAC,EAAD,OChDAqC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTxB,MAAK,SAAC6B,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BlC,QAAQC,IACN,+GAKEuB,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB5B,QAAQC,IAAI,sCAGRuB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAACrD,GACNgB,QAAQhB,MAAM,4CAA6CA,MC9FjE,IAYesD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkB1B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,GAAwBlC,OAAOC,SAASkC,MACpDC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,QAAQ,WAC9B,IAAMhC,EAAK,UAAM6B,GAAN,sBAEPpC,IAgEV,SAAiCO,EAAOC,GAEtCgC,MAAMjC,EAAO,CACXkC,QAAS,CAAE,iBAAkB,YAE5B1D,MAAK,SAAC2D,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CrC,UAAUC,cAAcqC,MAAMhE,MAAK,SAAC6B,GAClCA,EAAaoC,aAAajE,MAAK,WAC7BmB,OAAOC,SAAS8C,eAKpB3C,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLrC,QAAQC,IAAI,oEAtFViE,CAAwB3C,EAAOC,GAI/BC,UAAUC,cAAcqC,MAAMhE,MAAK,WACjCC,QAAQC,IACN,+GAMJqB,EAAgBC,EAAOC,OE/B/B2C,GAKA7B,M","file":"static/js/main.77ff72af.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/analytics\"\r\n\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC_PJ7fe-WikPfEpF-eL_qft93gezWfUeA\",\r\n  authDomain: \"swipeekaro.firebaseapp.com\",\r\n  projectId: \"swipeekaro\",\r\n  storageBucket: \"swipeekaro.appspot.com\",\r\n  messagingSenderId: \"110354245418\",\r\n  appId: \"1:110354245418:web:832d427fc6da9882abe053\",\r\n  measurementId: \"G-C27D345JWK\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst database = firebaseApp.firestore();\r\n\r\n\r\nexport default database;","\r\nimport React from 'react'\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport \"./Notification.css\"\r\n\r\nconst Notification = () => {\r\n    const notify1 = () => toast.success(\"Notification Activated, success notif\");\r\n    const notify2 = () => toast(\"Different kind of notifications can be made with different designs.\");\r\n    const notify3 = () => toast.custom(\r\n        <span>\r\n            Custom <em>JSX content</em> can be turned into <strong>notifications</strong>\r\n        </span>);\r\n    const notify4 = () => toast.error(\"Notification Activated, error notif\");\r\n    const notify5 = () => toast.custom(\r\n        <img src=\"https://www.online-tech-tips.com/wp-content/uploads/2019/09/cropped-notifications.png\" alt=\"notification\"/>, { \r\n            style: {\r\n                maxWidth: '100px',\r\n            }\r\n        }\r\n    );\r\n    const notify6 = () => toast(\"Images can be notifications\");\r\n    const notify7 = () => toast(\"Can add custom styling\",  {\r\n        style: {\r\n            border: '1px solid black',\r\n            background: 'orangered',\r\n        },\r\n    });\r\n    const notify8 = () => toast(\"Custom styling example 2\", {\r\n        style: {\r\n            border: '1px solid red',\r\n            width: '300px',\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <button className=\"button1\" onClick={notify1}>Click</button>\r\n            <button className=\"button2\" onClick={notify2}>Click</button>\r\n            <button className=\"button3\" onClick={notify3}>Click</button>\r\n            <button className=\"button4\" onClick={notify4}>Click</button>\r\n            <button className=\"button5\" onClick={notify5}>Click</button>\r\n            <button className=\"button6\" onClick={notify6}>Click</button>\r\n            <button className=\"button7\" onClick={notify7}>Click</button>\r\n            <button className=\"button8\" onClick={notify8}>Click</button>\r\n            <Toaster />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import React from \"react\";\r\nimport './App.css';\r\n// import Cards from \"./Cards\";\r\nimport 'firebase/analytics';\r\nimport database from \"./firebase\";\r\nimport firebase from \"firebase/app\"\r\nimport Notification from \"./Notification\"\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route\r\n// } from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  \r\n  React.useEffect(() => {\r\n    let msg = null\r\n    if (firebase.messaging.isSupported()) {\r\n      msg = firebase.messaging()\r\n      msg.requestPermission().then(() => {\r\n        console.log()\r\n        return msg.getToken({ vapidKey: \"BNr6t72DsL2tuv-9_pcEhQqgQv-A1Irqpaohv5k48vC2Wg-Hf58bORmBK6g8adqT4hHOTC7IXaVr_Yjl1Vkh9Oc\" });\r\n      }).then((data) => {\r\n        console.warn(\"token\", data)\r\n\r\n        if (firebase.auth().currentUser == null) {\r\n          database.collection(\"TokenWithoutLogin\").doc(\"TokenWithoutLogin\").update(\r\n            {\r\n              token: firebase.firestore.FieldValue.arrayUnion(data),\r\n            }\r\n          )\r\n        }\r\n        else {\r\n          console.log(firebase.auth().currentUser.email)\r\n          database.collection(\"Users\").doc(firebase.auth().currentUser.email).update(\r\n            {\r\n              token: data\r\n\r\n            }\r\n          )\r\n          database.collection(\"TokenWithoutLogin\").doc(\"TokenWithoutLogin\").update(\r\n            {\r\n              token: firebase.firestore.FieldValue.arrayRemove(data),\r\n            }\r\n          )\r\n        }\r\n      })\r\n    } else {\r\n      //alert('no-support :(')\r\n    }\r\n\r\n    // const msg = firebase.messaging()\r\n\r\n\r\n\r\n  })\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Notification />\r\n      {/* <Router>\r\n        <Switch>\r\n          <Route path=\"/card/:auth/:id\">\r\n            <Header />\r\n            <DynamicCards />\r\n          </Route>\r\n          <Route path=\"/profile\">\r\n            <Header />\r\n            <Profile />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Header />\r\n            <Cards />\r\n          </Route>\r\n        </Switch>\r\n      </Router> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}